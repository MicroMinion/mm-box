#!/usr/bin/env node

var DHT = require('../index.js')
var winston = require('winston')
var path = require('path')
var mkdirp = require('mkdirp')
var kadfs = require('kad-fs-thomas')
var url = require('url')
var Identity = require('../identity.js')

/* STORAGE FUNCTIONS */

var storageDir = './data'

var createStore = function (name) {
  name = url.parse(name)
  if (name.protocol === 'file:') {
    mkdirp.sync(name.pathname)
    return kadfs(name.pathname)
  } else {
    throw new Error('Unsupported storage location')
  }
}

/* LOGGER */

var logger = new winston.Logger({
  transports: [
    new winston.transports.Console({
      level: 'info',
      timestamp: true,
      logstash: true
    })
  ]
})

/* PLATFORM STORE */

var platformStore

if (!process.env.PLATFORM_STORE) {
  mkdirp.sync(path.join(storageDir, 'platform'))
  platformStore = kadfs(path.join(storageDir, 'platform'))
} else {
  platformStore = createStore(process.env.PLATFORM_STORE)
}

/* DHT STORE */

var dhtStore

if (!process.env.DHT_STORE) {
  mkdirp.sync(path.join(storageDir, 'dht'))
  dhtStore = kadfs(path.join(storageDir, 'dht'))
} else {
  dhtStore = createStore(process.env.DHT_STORE)
}

/* CONNECTION_INFO */

if (process.env.PORT) {
  var connectionInfo = [{
    transportType: 'udp',
    transportInfo: {
      port: process.env.PORT
    }
  }, {
    transportType: 'tcp',
    transportInfo: {
      port: process.env.PORT
    }
  }]
}

/* IDENTITY */

if (process.env.IDENTITY) {
  var identity = new Identity(process.env.IDENTITY)
}

/* mDNS support */

var mDNS = true

if (process.env.DISABLE_MDNS) {
  mDNS = false
}

/* INITIALIZATION */

var dht = new DHT({
  logger: logger,
  platformStore: platformStore,
  dhtStore: dhtStore,
  connectionInfo: connectionInfo,
  identity: identity,
  mDNS: mDNS
})

if (identity) {
  identity.setPlatform(dht.platform)
}

dht.start()
